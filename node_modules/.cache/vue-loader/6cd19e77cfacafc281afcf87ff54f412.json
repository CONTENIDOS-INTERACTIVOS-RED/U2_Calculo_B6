{"remainingRequest":"/home/runner/work/U2_Calculo_B6/U2_Calculo_B6/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Calculo_B6/U2_Calculo_B6/src/views/curso/Tema2.vue?vue&type=template&id=7fc7bf29&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Calculo_B6/U2_Calculo_B6/src/views/curso/Tema2.vue","mtime":1745109133203},{"path":"/home/runner/work/U2_Calculo_B6/U2_Calculo_B6/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Calculo_B6/U2_Calculo_B6/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Calculo_B6/U2_Calculo_B6/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Calculo_B6/U2_Calculo_B6/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Calculo_B6/U2_Calculo_B6/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}